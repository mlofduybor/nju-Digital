`include "defines.v"
module keyboard_decoder(clk, clrn, scan_code, ready, prv_acsill_code, prv_scan_code);
    input clk, clrn;
    input [7:0] scan_code;
    input ready;
    output reg [`acsill_bit-1:0] prv_acsill_code;
    wire [`acsill_bit-1:0] acsill_code;
    
    reg [`acsill_bit-1:0] acsill_code_tmp;
    reg break_tmp;

    reg prv_break_tmp;

    output reg [7:0] prv_scan_code;

    always @(*)
    begin
        if (!clrn)
        begin
            break_tmp = 0;
            acsill_code_tmp = 0;
        end
        else
        begin
            case (scan_code)
                `a_scan: begin acsill_code_tmp = `a_acsill; break_tmp = 0; end
                `b_scan: begin acsill_code_tmp = `b_acsill; break_tmp = 0; end
                `c_scan: begin acsill_code_tmp = `c_acsill; break_tmp = 0; end
                `break_scan: begin acsill_code_tmp = `break_acsill; break_tmp = 1'b1;end
                default: begin acsill_code_tmp = `break_acsill; break_tmp = 0;end        
            endcase
        end
    end

    always @(posedge clk)
    begin
        prv_break_tmp <= break_tmp;
    end

    assign acsill_code = prv_break_tmp?`break_acsill:acsill_code_tmp;


    always @(posedge clk)
    begin
        if (!clrn)
            prv_acsill_code <= `break_acsill;
        else if (ready)
        begin
            prv_acsill_code <= acsill_code;
        end
        else
            prv_acsill_code <= prv_acsill_code;
    end

    always @(posedge clk)
    begin
        if (!clrn)
            prv_scan_code <= `break_acsill;
        else if (ready)
        begin
            prv_scan_code <= scan_code;
        end
        else
            prv_scan_code <= prv_scan_code;
    end


endmodule


